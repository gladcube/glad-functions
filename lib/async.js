// Generated by LiveScript 1.5.0
(function(){
  var ref$, args, $_last_arg, C, apply, Async;
  ref$ = require('./func'), args = ref$.args, $_last_arg = ref$.$_last_arg;
  C = require('./combinator').C;
  apply = require('prelude-ls').apply;
  module.exports = new (Async = (function(){
    Async.displayName = 'Async';
    var before, after, prototype = Async.prototype, constructor = Async;
    Async.prototype.before = before = curry$(function(f, g){
      var this$ = this;
      return compose$(args, (function(it){
        return it.concat(f);
      }), apply(g));
    });
    Async.prototype.after = after = curry$(function(f, g){
      var this$ = this;
      return $_last_arg(compose$(C(curry$(function(x$, y$){
        return x$.concat(y$);
      })), (function(it){
        return compose$(args, it);
      }), (function(it){
        return compose$(it, apply(g));
      })), f);
    });
    function Async(){}
    return Async;
  }()));
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
