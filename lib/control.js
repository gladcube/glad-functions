// Generated by LiveScript 1.5.0
(function(){
  var Control;
  module.exports = new (Control = (function(){
    Control.displayName = 'Control';
    var if_, unless_, try_, catch_, finally_, throw_, prototype = Control.prototype, constructor = Control;
    Control.prototype.if_ = if_ = curry$(function(x, f){
      if (x) {
        return f();
      }
    });
    Control.prototype['if'] = if_;
    Control.prototype.unless_ = unless_ = curry$(function(x, f){
      if (!x) {
        return f();
      }
    });
    Control.prototype.unless = unless_;
    Control.prototype.try_ = try_ = function(f, g, h){
      var e;
      try {
        return f();
      } catch (e$) {
        e = e$;
        return typeof g == 'function' ? g(e) : void 8;
      } finally {
        if (typeof h == 'function') {
          h();
        }
      }
    };
    Control.prototype['try'] = try_;
    Control.prototype.catch_ = catch_ = curry$(function(f, g){
      var e;
      try {
        return f();
      } catch (e$) {
        e = e$;
        return g(e);
      }
    });
    Control.prototype['catch'] = catch_;
    Control.prototype.finally_ = finally_ = curry$(function(f, g){
      try {
        return f();
      } finally {
        g();
      }
    });
    Control.prototype['finally'] = finally_;
    Control.prototype.throw_ = throw_ = function(x){
      throw x;
    };
    Control.prototype['throw'] = throw_;
    function Control(){}
    return Control;
  }()));
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
