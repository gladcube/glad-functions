// Generated by LiveScript 1.5.0
(function(){
  var return_, Flow;
  return_ = require('./applicative').return_;
  module.exports = new (Flow = (function(){
    Flow.displayName = 'Flow';
    var act, if_, unless_, when_, except, then_, else_, ref$, case_, otherwise_, case$, prototype = Flow.prototype, constructor = Flow;
    Flow.prototype.act = act = curry$(function(f, x){
      return return_(x)(
      f(x));
    });
    Flow.prototype.if_ = if_ = curry$(function(x, f, y){
      if (x) {
        return f(y);
      } else {
        return y;
      }
    });
    Flow.prototype['if'] = if_;
    Flow.prototype.unless_ = unless_ = curry$(function(x, f, y){
      if (!x) {
        return f(y);
      } else {
        return y;
      }
    });
    Flow.prototype.unless = unless_;
    Flow.prototype.when_ = when_ = curry$(function(f, g, x){
      if (f(x)) {
        return g(x);
      } else {
        return x;
      }
    });
    Flow.prototype.when = when_;
    Flow.prototype.except = except = curry$(function(f, g, x){
      if (!f(x)) {
        return g(x);
      } else {
        return x;
      }
    });
    Flow.prototype.then_ = then_ = curry$(function(f, x){
      if (x) {
        return f(x);
      } else {
        return x;
      }
    });
    Flow.prototype.then = then_;
    Flow.prototype.else_ = else_ = curry$(function(f, x){
      if (!x) {
        return f(x);
      } else {
        return x;
      }
    });
    Flow.prototype['else'] = else_;
    ref$ = function(){
      var $;
      $ = {};
      return [
        curry$(function(f, g, x){
          switch (false) {
          case x !== $:
            return $;
          case !f(x):
            return return_($)(
            g(x));
          default:
            return x;
          }
        }), curry$(function(f, x){
          switch (false) {
          case x === $:
            return f(x);
          }
        })
      ];
    }(), case_ = ref$[0], otherwise_ = ref$[1];
    Flow.prototype.case_ = case_;
    Flow.prototype['case'] = case_;
    Flow.prototype.otherwise_ = otherwise_;
    Flow.prototype.otherwise = otherwise_;
    Flow.prototype.case$ = case$ = compose$(when_, act);
    function Flow(){}
    return Flow;
  }()));
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
}).call(this);
