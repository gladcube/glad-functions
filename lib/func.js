// Generated by LiveScript 1.5.0
(function(){
  var when_, length, C, ref$, at, map, splitAt, id, take, tail, concat, zipWith, apply, findIndex, objToPairs, pairsToObj, any, all, Func, slice$ = [].slice;
  when_ = require('./flow').when_;
  length = require('./list').length;
  C = require('./combinator').C;
  ref$ = require('prelude-ls'), at = ref$.at, map = ref$.map, splitAt = ref$.splitAt, id = ref$.id, take = ref$.take, map = ref$.map, tail = ref$.tail, concat = ref$.concat, zipWith = ref$.zipWith, apply = ref$.apply, findIndex = ref$.findIndex, objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj, any = ref$.any, all = ref$.all;
  module.exports = new (Func = (function(){
    Func.displayName = 'Func';
    var $, $$, $_at, $_zip, $_head, $_last, $_arg, $_head_arg, $_last_arg, $_args, $$_args, $_when, $_find, $_pairs, $_key, $_any, $_all, lazy, dist, arg, args, withl, withr, need, prototype = Func.prototype, constructor = Func;
    Func.prototype.$ = $ = curry$(function(f, x){
      return f(x);
    });
    Func.prototype.$$ = $$ = curry$(function(fs, x){
      var this$ = this;
      return map((function(it){
        return it(x);
      }), fs);
    });
    Func.prototype.$_at = $_at = curry$(function(n, f, xs){
      return concat(
      $_zip([id, concat])(
      $_zip([id, partialize$.apply(this, [dist, [void 8, [compose$(take(1), map(f)), tail]], [0]])])(
      splitAt(n)(
      xs))));
    });
    Func.prototype.$_zip = $_zip = zipWith($);
    Func.prototype.$_head = $_head = $_at(0);
    Func.prototype.$_last = $_last = curry$(function(f, xs){
      return $_at(length(xs) - 1, f, xs);
    });
    Func.prototype.$_arg = $_arg = curry$(function(n, f, g){
      return compose$(args, $_at(n, f), apply(g));
    });
    Func.prototype.$_head_arg = $_head_arg = curry$(function(f, g){
      return compose$(args, $_head(f), apply(g));
    });
    Func.prototype.$_last_arg = $_last_arg = curry$(function(f, g){
      return compose$(args, $_last(f), apply(g));
    });
    Func.prototype.$_args = $_args = curry$(function(f, g){
      return compose$(args, map(f), apply(g));
    });
    Func.prototype.$$_args = $$_args = curry$(function(fs, g){
      return compose$(args, $_zip(fs), apply(g));
    });
    Func.prototype.$_when = $_when = curry$(function(f, g, xs){
      return map(when_(f, g), xs);
    });
    Func.prototype.$_find = $_find = curry$(function(f, g, xs){
      return $_at(findIndex(f, xs), g, xs);
    });
    Func.prototype.$_filter = $_when;
    Func.prototype.$_pairs = $_pairs = curry$(function(f, o){
      return pairsToObj(
      f(
      objToPairs(
      o)));
    });
    Func.prototype.$_key = $_key = curry$(function(k, f, o){
      var this$ = this;
      return $_pairs($_when(compose$(at(0), (function(it){
        return it === k;
      })), $_at(1, f)), o);
    });
    Func.prototype.$_any = $_any = curry$(function(fs, x){
      var this$ = this;
      return any((function(it){
        return it(x);
      }), fs);
    });
    Func.prototype.$_all = $_all = curry$(function(fs, x){
      var this$ = this;
      return all((function(it){
        return it(x);
      }), fs);
    });
    Func.prototype.lazy = lazy = function(x){
      var y, res$, i$, to$;
      res$ = [];
      for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      y = res$;
      return function(){
        return apply(x, y);
      };
    };
    Func.prototype.dist = dist = C($$);
    Func.prototype.arg = arg = function(n){
      return function(){
        return arguments[n];
      };
    };
    Func.prototype.args = args = function(){
      return map(id)(
      arguments);
    };
    Func.prototype.withl = withl = curry$(function(f, x){
      return dist(x, [f, id]);
    });
    Func.prototype.withr = withr = curry$(function(f, x){
      return dist(x, [id, f]);
    });
    Func.prototype.need = need = curry$(function(n, f){
      var g;
      g = function(as){
        return function(){
          return function(as){
            switch (false) {
            case !(length(as) >= n):
              return apply(f, as);
            default:
              return g(as);
            }
          }(
          C(curry$(function(x$, y$){
            return x$.concat(y$);
          }), map(id)(
          arguments))(
          as));
        };
      };
      return g([]);
    });
    function Func(){}
    return Func;
  }()));
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
}).call(this);
