// Generated by LiveScript 1.5.0
(function(){
  var get, may, ref$, find, filter, map, all, at, id, List;
  get = require('./obj').get;
  may = require('./option').may;
  ref$ = require('prelude-ls'), find = ref$.find, filter = ref$.filter, map = ref$.map, all = ref$.all, at = ref$.at, id = ref$.id;
  module.exports = new (List = (function(){
    List.displayName = 'List';
    var find_map, filter_map, length, pick, list, range, none, prototype = List.prototype, constructor = List;
    List.prototype.find_map = find_map = curry$(function(f, xs){
      return may(f)(
      find(f, xs));
    });
    List.prototype.filter_map = filter_map = curry$(function(f, xs){
      return map(f)(
      filter(f, xs));
    });
    List.prototype.length = length = get('length');
    List.prototype.pick = pick = curry$(function(ns, xs){
      var this$ = this;
      return map((function(it){
        return it(xs);
      }), map(at, ns));
    });
    List.prototype.list = list = function(){
      return map(id)(
      arguments);
    };
    List.prototype.range = range = curry$(function(x, y){
      var i$, results$ = [];
      for (i$ = x; i$ < y; ++i$) {
        results$.push(i$);
      }
      return results$;
    });
    List.prototype.none = none = curry$(function(f, xs){
      return all(compose$(f, not$), xs);
    });
    function List(){}
    return List;
  }()));
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
  function not$(x){ return !x; }
}).call(this);
