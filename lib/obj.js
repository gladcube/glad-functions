// Generated by LiveScript 1.5.0
(function(){
  var ref$, map, objToPairs, concat, pairsToObj, Obj;
  ref$ = require('prelude-ls'), map = ref$.map, objToPairs = ref$.objToPairs, concat = ref$.concat, pairsToObj = ref$.pairsToObj;
  module.exports = new (Obj = (function(){
    Obj.displayName = 'Obj';
    var let_, call, get, set, set_$, delete_, new_, merge, prototype = Obj.prototype, constructor = Obj;
    Obj.prototype.let_ = let_ = function(x, k){
      var a, res$, i$, to$;
      res$ = [];
      for (i$ = 2, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      a = res$;
      return x[k].apply(x, a);
    };
    Obj.prototype['let'] = let_;
    Obj.prototype.call = call = function(k){
      var i$, a, res$, j$, x;
      res$ = [];
      for (j$ = 1 < (i$ = arguments.length - 1) ? 1 : (i$ = 1); j$ < i$; ++j$) {
        res$.push(arguments[j$]);
      }
      a = res$; x = arguments[i$];
      return x[k].apply(x, a);
    };
    Obj.prototype.get = get = curry$(function(k, x){
      return x[k];
    });
    Obj.prototype.set = set = curry$(function(k, v, x){
      return x[k] = v;
    });
    Obj.prototype.set_$ = set_$ = curry$(function(k, f, o){
      return set(k, f(get(k, o)), o);
    });
    Obj.prototype.delete_ = delete_ = curry$(function(k, x){
      var ref$;
      return ref$ = x[k], delete x[k], ref$;
    });
    Obj.prototype['delete'] = delete_;
    Obj.prototype.new_ = new_ = function(c){
      var as, res$, i$, to$;
      res$ = [];
      for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      as = res$;
      return new (c.bind.apply(c, [c].concat(as)));
    };
    Obj.prototype['new'] = new_;
    Obj.prototype.merge = merge = curry$(function(o, s){
      return pairsToObj(
      concat(
      map(objToPairs)(
      [s, o])));
    });
    function Obj(){}
    return Obj;
  }()));
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
